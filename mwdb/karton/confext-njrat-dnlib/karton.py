import tempfile
import logging
import os.path
import json

from karton.core import Config, Karton, Task


FAMILY = "njrat"


class Confextractor(Karton):
    """
    Confextractor for njrat.

    Example output:

    ```
    {
      "host": "0.tcp.sa.ngrok.io",
      "port": "11048",
      "version": "0.7d",
      "campaign": "teste",
      "separator": "|'|'|",
      "install_dir": "%TEMP%",
      "install_name": "server.exe"
    }
    ```

    """

    identity = f"karton.confext.{FAMILY}"
    version = "0.1.0"
    filters = [{"type": "sample"}]

    def process(self, task: Task) -> None:
        """
        Process a given task by extracting configuration information from a sample.
        Checks to make sure the config is sane are to be made in the `process_sample` method.

        Args:
            task (Task): The task to process.

        Returns:
            None
        """

        sample = task.get_resource("sample")

        with tempfile.TemporaryDirectory() as tmpdir:
            sample_path = os.path.join(tmpdir, sample.sha256)
            sample.download_to_file(sample_path)

            try:
                conf = self.process_sample(sample_path)
                assert conf, "Extractor failed"
                logging.warning("Extracted config: " + str(conf))
            except Exception as e:
                logging.warning("Could not extract config")
                logging.warning(e)
                return

            task = Task(
                {
                    "type": "config",
                    "family": FAMILY,
                    "kind": "static",
                    "quality": "high",
                },
                payload={"config": conf, "parent": sample},
            )
            self.send_task(task)

    def process_sample(self, sample_path: str) -> dict:
        """
        Extract configuration information from a given sample.

        Args:
            sample_path (str): The path of the sample to extract configuration information from.

        Returns:
            dict: A dictionary containing the extracted configuration information.
        """

        try:
            # COMPLETE EXTRACTION PROCESS HERE
            return {
                "host": "127.0.0.1",
                "port": 5555,
                "install_name": "",
                "install_dir": "",
                "version": "",
                "separator": "",
                "campaign": ""
            }
        except Exception as e:
            logging.warning(str(e))


if __name__ == "__main__":
    Confextractor.main()
